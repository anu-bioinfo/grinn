unlist(network[[1]]$graph$nodes, recursive = FALSE)[[9]]
unlist(network[[1]]$graph$nodes, recursive = FALSE)[[9]]$GID
corrnw$edges
basicnw$edges
corrattb
corrnw$nodes
corrnw$edges$source
lapply(corrnw$edges$source, function(x) which(corrattb$id == x))
corrattb$id
lapply(corrnw$edges$source, function(x) which(corrattb$gid == x))
?which
corrattb$id[1]
formatId = function(x) {
ind = which(corrattb$gid == x)
x = corrattb$id[ind]
}
lapply(corrnw$edges$source, FUN=formatId)
corrnw$edges
xx = corrnw
formatId = function(x) {
ind = which(corrattb$gid == x)
x = corrattb$id[ind]
}
xx$edges$source = lapply(corrnw$edges$source, FUN=formatId)
xx$edges
xx = corrnw
zz =lapply(corrnw$edges$source, FUN=formatId)
zz
zz[[3]]
is.na(zz[[3]])
length(zz[[3]])
length(zz[[9]])
formatId = function(x) {
ind = which(corrattb$gid == x)
x = ifelse(length(ind)>0,corrattb$id[ind],corrattb$gid[ind])
#x = corrattb$id[ind]
}
xx
xx$edges$source = lapply(corrnw$edges$source, FUN=formatId)
xx
corrattb
formatId = function(x) {
ind = which(corrattb$gid == x)
x = ifelse(length(ind)>0,corrattb$id[ind],x)
#x = corrattb$id[ind]
}
xx = corrnw
xx$edges$source = lapply(corrnw$edges$source, FUN=formatId)
xx
corrnw$nodes
corrattb
xx = corrnw
corrnw$edges$source = lapply(corrnw$edges$source, FUN=formatId) #format edgelist
corrnw$edges$target = lapply(corrnw$edges$target, FUN=formatId) #format edgelist
corrnw$edges
xx$edges
fetchCorrGrinnNetwork <- function(datNormX, datNormY=NULL, corrCoef=0.5, pval=1e-9, method="spearman", returnAs="tab",
sourceTo=NULL, targetTo=NULL, filterSource=list()){
corrnw = fetchCorrNetwork(datNormX=datNormX,datNormY=datNormY,corrCoef=corrCoef,pval=pval,method=method,returnAs="tab")
if(nrow(corrnw$nodes)>0){
nodetypes = tolower(unique(corrnw$nodes$nodetype))
if(length(nodetypes)>1){#if there are two data types
#basicnw1 = fetchGrinnNetwork(txtInput=corrnw$nodes[which(tolower(corrnw$nodes$nodetype)==nodetypes[1]), 1],from=nodetypes[1],
#                             to=nodetypes[2],filterSource=list(),dbXref="grinn") #relations between datasets
#basicnw2 = fetchGrinnNetwork(txtInput=corrnw$nodes[which(tolower(corrnw$nodes$nodetype)==nodetypes[2]), 1],from=nodetypes[2],
#                             to=nodetypes[1],filterSource=list(),dbXref="grinn") #relations between datasets
#basicnw3 = rbind(basicnw1$edges,basicnw2$edges) #collect all edges
#basicnw3 = basicnw3[duplicated(basicnw3[,1:2]),] #choose overlapping edges
#basicnwNodes = rbind(basicnw1$nodes,basicnw2$nodes) #collect all nodes
#basicnwNodes = basicnwNodes[duplicated(basicnwNodes[,1]),] #choose overlapping nodes
if(!is.null(sourceTo)){
basicnw4 = fetchGrinnNetwork(txtInput=corrnw$nodes[which(tolower(corrnw$nodes$nodetype)==nodetypes[1]), 1],from=nodetypes[1],
to=sourceTo,filterSource=filterSource,dbXref="grinn") #relations sources to others
basicnwNodes = basicnw4$nodes #collect all nodes
#basicnwNodes = rbind(basicnwNodes,basicnw4$nodes) #collect all nodes
}else{
basicnw4 = data.frame()
basicnwNodes = data.frame()
}
basicnw5 = fetchGrinnNetwork(txtInput=corrnw$nodes[which(tolower(corrnw$nodes$nodetype)==nodetypes[2]), 1],from=nodetypes[2],
to=targetTo,filterSource=filterSource,dbXref="grinn") #relations from targets to others
basicnwNodes = rbind(basicnwNodes,basicnw5$nodes) #collect all nodes
basicnwEdges = rbind(basicnw4$edges,basicnw5$edges) #collect all edges
#basicnwEdges = rbind(basicnw3,basicnw4$edges,basicnw5$edges) #collect all edges
if(!is.null(basicnwEdges)){
basicnwEdges = basicnwEdges[!duplicated(basicnwEdges[,1:ncol(basicnwEdges)]),] #remove duplicated edges
basicnwNodes = basicnwNodes[!duplicated(basicnwNodes[,1]),] #remove duplicated nodes
basicnw = list(nodes=basicnwNodes, edges=basicnwEdges)
}else{
basicnw = list(nodes=data.frame(),edges=data.frame())
}
}else{#if there is only one data type
basicnw = fetchGrinnNetwork(txtInput=corrnw$nodes$id,from=nodetypes,to=targetTo,filterSource=filterSource,dbXref="grinn")
}
#collect node info
corrattb = data.frame()
getNodeInfo = function(z, x, y){
querystring <- paste0("MATCH (node:",z[y],") WHERE node.GID = '",z[x],"' RETURN DISTINCT node")
result <- curlRequestCypher(querystring)
if(length(result)>0){
data.frame(id=result[[1]]$metadata$id,gid=result[[1]]$data$GID,nodename=result[[1]]$data$name,nodetype=result[[1]]$metadata$labels[[1]],xref=paste0(unlist(result[[1]]$data$xref),collapse = "||"), stringsAsFactors = FALSE)
}else{
data.frame()
}
}
formatId = function(x) {
ind = which(corrattb$gid == x)
x = ifelse(length(ind)>0,corrattb$id[ind],x)
}
corrattb = plyr::ldply (apply(corrnw$nodes, MARGIN = 1, FUN=getNodeInfo, x = "id", y = "nodetype")) #format nodelist
corrnw$edges$source = lapply(corrnw$edges$source, FUN=formatId) #format edgelist
corrnw$edges$target = lapply(corrnw$edges$target, FUN=formatId) #format edgelist
if(nrow(basicnw$nodes)>0){
cat("Formating and returning combined network ...\n")
basicnw$edges$corr_coef = 1
basicnw$edges$pval = 0
basicnw$edges$direction = 0
corrnw$edges$relsource = ""
corrnw$nodes$xref = ""
corrnw$nodes$gid = corrnw$nodes$id #same ids
pair = rbind(basicnw$edges,corrnw$edges)
if(nrow(corrattb)>0){attb = rbind(basicnw$nodes,corrattb,corrnw$nodes)}else{attb = rbind(basicnw$nodes,corrnw$nodes)}
attb = attb[!duplicated(attb[,2]),]
cat("Found ",nrow(pair)," relationships...\n")
}else{#if only correlation network found
cat("Formating and returning combined network ...\n")
pair = corrnw$edges
corrnw$nodes$xref = ""
corrnw$nodes$gid = corrnw$nodes$id #same ids
if(nrow(corrattb)>0){attb = rbind(corrattb,corrnw$nodes)}else{attb = corrnw$nodes}
attb = attb[!duplicated(attb[,2]),]
cat("Found ",nrow(pair)," relationships...\n")
}
}else{#if no correlation network found
print("Returning no data...")
pair = data.frame()
attb = data.frame()
cynetwork = list(nodes="", edges="")
}
out = switch(returnAs,
tab = list(nodes=attb, edges=pair),
json = list(nodes=jsonlite::toJSON(attb), edges=jsonlite::toJSON(pair)),
cytoscape = createCyNetwork(attb, pair),
stop("incorrect return type"))
}
dummy <- rbind(nodetype=rep("metabolite"),t(mtcars))
colnames(dummy) <- c('G1.1','G27967','G371','G4.1',paste0('G',sample(400:22000, 28)))
result <- fetchCorrGrinnNetwork(datNormX=dummy, corrCoef=0.7, pval=1e-12, method="spearman", returnAs="tab", targetTo="protein")
library(igraph)
plot(graph.data.frame(result$edges[,1:2], directed=FALSE))
result$edges
result$nodes[,1:2]
result$edges
result$nodes[,1:4]
result$edges
result$nodes[,1:3]
dummyX <- rbind(nodetype=rep("metabolite"),t(mtcars)[,1:16])
colnames(dummyX) <- c('G1.1','G27967','G371','G4.1',paste0('G',sample(400:22000, 12)))
',sample(400:22000, 12)))
dummyX <- rbind(nodetype=rep("metabolite"),t(mtcars)[,1:16])
colnames(dummyX) <- c('G1.1','G27967','G371','G4.1',paste0('G',sample(400:22000, 12)))
dummyY <- rbind(nodetype=rep("protein"),t(mtcars)[,17:32])
colnames(dummyY) <- c('P28845','P08235','Q08AG9','P80365',paste0('P',sample(10000:80000, 12)))
result <- fetchCorrGrinnNetwork(datNormX=dummyX, datNormY=dummyY, corrCoef=0.7, pval=1e-4, method="spearman", returnAs="json", sourceTo="pathway", targetTo="gene")
library(igraph)
plot(graph.data.frame(result$edges[,1:2], directed=FALSE))
result$nodes
result <- fetchCorrGrinnNetwork(datNormX=dummyX, datNormY=dummyY, corrCoef=0.7, pval=1e-4, method="spearman", returnAs="tab", sourceTo="pathway", targetTo="gene")
plot(graph.data.frame(result$edges[,1:2], directed=FALSE))
result$edges[1:10,]
result$edges
result$nodes
result$nodes[,1:3]
library(grinn)
dummyX1 <- rbind(nodetype=rep("metabolite"),mtcars[1:16,])
colnames(dummyX1) <- c('G1.1','G27967','G371','G4.1',letters[1:7])
rownames(dummyX1)[-1] <- paste0(rep("normal_"),1:16)
dummyX2 <- rbind(nodetype=rep("metabolite"),mtcars[17:32,])
colnames(dummyX2) <- c('G1.1','G27967','G371','G4.1',letters[1:7])
rownames(dummyX2)[-1] <- paste0(rep("cancer_"),1:16)
result <- fetchDiffCorrGrinnNetwork(datNormX1=dummyX1, datNormX2=dummyX2, pDiff=0.05, method="spearman", returnAs="tab", targetTo="protein")
dummyX1 <- rbind(nodetype=rep("metabolite"),mtcars[1:16,])
colnames(dummyX1) <- c('G1.1','G27967','G371','G4.1',letters[1:7])
rownames(dummyX1)[-1] <- paste0(rep("normal_"),1:16)
dummyX2 <- rbind(nodetype=rep("metabolite"),mtcars[17:32,])
colnames(dummyX2) <- c('G1.1','G27967','G371','G4.1',letters[1:7])
rownames(dummyX2)[-1] <- paste0(rep("cancer_"),1:16)
result <- fetchDiffCorrNetwork(datNormX1=dummyX1, datNormX2=dummyX2, datNormY1=NULL, datNormY2=NULL, pDiff=0.05, method="spearman", returnAs="tab")
result
dummy <- rbind(nodetype=rep("metabolite"),t(mtcars))
colnames(dummy) <- c('G1.1','G27967','G371','G4.1',paste0('G',sample(400:22000, 28)))
result <- fetchCorrNetwork(datNormX=dummy, datNormY=NULL, corrCoef=0.7, pval=1e-12, method="spearman", returnAs="tab")
result
library(grinn)
result <- fetchDiffCorrNetwork(datNormX1=dummyX1, datNormX2=dummyX2, datNormY1=NULL, datNormY2=NULL, pDiff=0.05, method="spearman", returnAs="tab")
result
dummyX1 <- rbind(nodetype=rep("metabolite"),mtcars[1:16,])
colnames(dummyX1) <- c('G1.1','G27967','G371','G4.1',letters[1:7])
rownames(dummyX1)[-1] <- paste0(rep("normal_"),1:16)
dummyX2 <- rbind(nodetype=rep("metabolite"),mtcars[17:32,])
colnames(dummyX2) <- c('G1.1','G27967','G371','G4.1',letters[1:7])
rownames(dummyX2)[-1] <- paste0(rep("cancer_"),1:16)
result <- fetchDiffCorrGrinnNetwork(datNormX1=dummyX1, datNormX2=dummyX2, pDiff=0.05, method="spearman", returnAs="tab", targetTo="protein")
library(grinn)
result <- fetchDiffCorrGrinnNetwork(datNormX1=dummyX1, datNormX2=dummyX2, pDiff=0.05, method="spearman", returnAs="tab", targetTo="protein")
library(igraph)
plot(graph.data.frame(result$edges[,1:2], directed=FALSE))
result
data(dummy)
data(dummyPheno)
result <- fetchWGCNAModule(datNorm=dummy, datPheno=dummyPheno, minModuleSize=5, threshold=0.2)
result
library(grinn)
result <- fetchWGCNAModule(datNorm=dummy, datPheno=dummyPheno, minModuleSize=5, threshold=0.2)
result <- fetchWGCNAModule(datNorm=dummy, datPheno=dummyPheno, minModuleSize=5, threshold=0.2)
result
result <- fetchModuGrinnNetwork(datNorm=dummy, datPheno=dummyPheno, minModuleSize=5, threshold=0.2, returnAs="tab", targetTo="pathway", filterSource=c("REACTOME","KEGG"))
library(grinn)
dummy <- rbind(nodetype=rep("metabolite"),t(mtcars))
colnames(dummy) <- c('G1.1','G27967','G371','G4.1',paste0('G',sample(400:22000, 28)))
result <- fetchCorrGrinnNetwork(datNormX=dummy, corrCoef=0.7, pval=1e-12, method="spearman", returnAs="tab", targetTo="protein")
library(igraph)
plot(graph.data.frame(result$edges[,1:2], directed=FALSE))
result$edges
result$nodes[,1:3]
library(grinn)
dummyX1 <- rbind(nodetype=rep("metabolite"),mtcars[1:16,1:5])
colnames(dummyX1) <- c('G1.1','G27967','G371','G4.1','G16962')
rownames(dummyX1)[-1] <- paste0(rep("normal_"),1:16)
dummyX2 <- rbind(nodetype=rep("metabolite"),mtcars[17:32,1:5])
colnames(dummyX2) <- c('G1.1','G27967','G371','G4.1','G16962')
rownames(dummyX2)[-1] <- paste0(rep("cancer_"),1:16)
dummyY1 <- rbind(nodetype=rep("protein"),mtcars[1:16,6:10])
colnames(dummyY1) <- c('P28845','P08235','Q08AG9','P80365','P15538')
rownames(dummyY1)[-1] <- paste0(rep("normal_"),1:16)
dummyY2 <- rbind(nodetype=rep("protein"),mtcars[17:32,6:10])
colnames(dummyY2) <- c('P28845','P08235','Q08AG9','P80365','P15538')
rownames(dummyY2)[-1] <- paste0(rep("cancer_"),1:16)
result <- fetchDiffCorrGrinnNetwork(datNormX1=dummyX1, datNormX2=dummyX2, datNormY1=dummyY1, datNormY2=dummyY2, pDiff=0.05, method="spearman", returnAs="tab", sourceTo="pathway", targetTo="gene")
result
data(dummy)
data(dummyPheno)
result <- fetchWGCNAModule(datNorm=dummy, datPheno=dummyPheno, minModuleSize=5, threshold=0.2)
result
library(grinn)
data(dummy)
data(dummyPheno)
result <- fetchModuGrinnNetwork(datNorm=dummy, datPheno=dummyPheno, minModuleSize=5, threshold=0.2, returnAs="tab", targetTo="pathway", filterSource=c("REACTOME","KEGG"))
library(grinn)
result <- fetchModuGrinnNetwork(datNorm=dummy, datPheno=dummyPheno, minModuleSize=5, threshold=0.2, returnAs="tab", targetTo="pathway", filterSource=c("REACTOME","KEGG"))
result
kw <- c('G160','G300','G371')
dummy <- rbind(nodetype=rep("metabolite"),t(mtcars))
colnames(dummy) <- c('G1.1','G27967','G371','G4.1',paste0('G',sample(400:22000, 28)))
result <- fetchGrinnCorrNetwork(txtInput=kw, from="metabolite", to="gene", datNormX=dummy, corrCoef=0.7, pval=1e-10, method="spearman")
library(grinn)
result <- fetchGrinnCorrNetwork(txtInput=kw, from="metabolite", to="gene", datNormX=dummy, corrCoef=0.7, pval=1e-10, method="spearman")
result
library(grinn)
kw <- c('G160','G300','G371')
dummyX1 <- rbind(nodetype=rep("metabolite"),mtcars[1:16,])
colnames(dummyX1) <- c('G1.1','G27967','G371','G4.1',letters[1:7])
rownames(dummyX1)[-1] <- paste0(rep("normal_"),1:16)
dummyX2 <- rbind(nodetype=rep("metabolite"),mtcars[17:32,])
colnames(dummyX2) <- c('G1.1','G27967','G371','G4.1',letters[1:7])
rownames(dummyX2)[-1] <- paste0(rep("cancer_"),1:16)
result <- fetchGrinnDiffCorrNetwork(txtInput=kw, from="metabolite", to="gene", datNormX1=dummyX1, datNormX2=dummyX2, pDiff=0.05)
result
kw <- c('G160','G300','G371','G16414','G17191')
data(dummy)
data(dummyPheno)
result <- fetchGrinnModuNetwork(txtInput=kw, from="metabolite", to="gene", datNorm=dummy, datPheno=dummyPheno, minModuleSize=5, threshold=0.2)
library(grinn)
result <- fetchGrinnModuNetwork(txtInput=kw, from="metabolite", to="gene", datNorm=dummy, datPheno=dummyPheno, minModuleSize=5, threshold=0.2)
result
library(grinn)
kw <- c('G160','G300','G371')
grinnnw <- fetchGrinnNetwork(txtInput=kw, from="metabolite", to="protein")
dummy <- rbind(nodetype=rep("metabolite"),t(mtcars))
colnames(dummy) <- c('G160','G300','G371','G367',paste0('G',sample(400:22000, 28)))
corrnw <- fetchCorrNetwork(datNormX=dummy, datNormY=NULL, corrCoef=0.5, pval= 1e-12, method="pearson", returnAs="tab")
result <- combineNetwork(grinnnw,corrnw)
plot(graph.data.frame(result$edges[,1:2], directed=FALSE))
library(grinn)
sessionInfo()
library(grinn)
sessionInfo()
library(grinn)
sessionInfo()
library(grinn)
library(grinn)
sessionInfo()
txtInput <- c(371,783)
result <- convertToGrinnID(txtInput, nodetype="metabolite", dbXref="chebi")
result
curlRequestCypher()
curlRequestCypher("UNWIND ['chebi:371','chebi:783'] AS x WITH x MATCH (node:Metabolite) WHERE ANY(y IN node.xref WHERE lower(y) = lower(x)) RETURN DISTINCT x, node.GID")
xx = curlRequestCypher("UNWIND ['chebi:371','chebi:783'] AS x WITH x MATCH (node:Metabolite) WHERE ANY(y IN node.xref WHERE lower(y) = lower(x)) RETURN DISTINCT x, node.GID")
xx
library(grinn)
txtInput <- list('ENSG00000140459','ENSG00000143811','ENSG00000104524')
result <- convertToGrinnID(txtInput, nodetype="gene", dbXref="ensembl")
result
library(grinn)
library(grinn)
cmpstat = read.csv("~/Documents/UCD/grinn_paper/example/metabolitestat.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
#prtstat = read.csv("~/Documents/grinn/extra/prtstat.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
genestat = read.csv("~/Documents/UCD/grinn_paper/example/genestat.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
#mycmp = mynodes$GrinnID[1:71] #Compound
#myprt = mynodes$GrinnID[72:315] #Protein
#mygene = mynodes$GrinnID[316:462] #Gene
gpm = fetchGrinnNetwork(txtInput = genestat$grinnID, from = "gene", to="metabolite")
mpg = fetchGrinnNetwork(txtInput = cmpstat$grinnID, from="metabolite", to="gene")
write.table(as.matrix(gpm$edges),"~/Documents/UCD/grinn_paper/example/gpmEdge.txt",sep="\t",row.names = F, quote = FALSE)
write.table(as.matrix(gpm$nodes),"~/Documents/UCD/grinn_paper/example/gpmNode.txt",sep="\t",row.names = F, quote = FALSE)
write.table(as.matrix(mpg$edges),"~/Documents/UCD/grinn_paper/example/mpgEdge.txt",sep="\t",row.names = F, quote = FALSE)
write.table(as.matrix(mpg$nodes),"~/Documents/UCD/grinn_paper/example/mpgNode.txt",sep="\t",row.names = F, quote = FALSE)
cmpnorm = read.csv("~/Documents/UCD/grinn_paper/example/metabolitenorm.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
genenorm = read.csv("~/Documents/UCD/grinn_paper/example/genenorm.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
dim(cmpnorm)
dim(genenorm)
ccmpnorm[1:0,1:10]
cmpnorm[1:0,1:10]
cmpnorm[1:10,1:10]
genenorm[1:10,1:10]
xx = t(genenorm)
xx[1:10,1:10]
genenorm = read.csv("~/Documents/UCD/grinn_paper/example/genenorm.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
dim(genenorm)
genenorm[1:10,1:10]
str(cmpnorm)
str(genenome)
str(genenorm)
xx = t(genenorm)
dim(xx)
xx[1:10,1:10]
xx =rbind(rep("gene",21204),xx)
dim(xx)
xx[1:10,1:10]
xx = t(genenorm)
write.table(xx,file="~/Desktop/norm.txt", sep="\t", quote=FALSE)
xx[1,1:5]
xx[1:10,1:10]
yy = data.frame(stringsAsFactors = FALSE)
yy[1,] = xx[1,]
dim(yy)
yy= xx[1,]
dim(yy)
length(xx)
dim(xx)
xx[1:10,1:10]
xx =rbind(xx,rep("gene",21204))
xx[1:10,1:10]
dim(xx)
xx[77:80,1:10]
write.table(xx,file="~/Desktop/norm.txt", sep="\t", quote=FALSE)
dim(xx)
xx[1:10,1:10]
cmpnorm[1:10,1:10]
colnames(xx) = xx[1,]
xx[1:10,1:10]
xx = xx[-1,]
dim(xx)
xx[1:10,1:10]
xx[75:79,1:10]
write.table(xx,file="~/Desktop/norm.txt", sep="\t", quote=FALSE)
genenorm = read.csv("~/Desktop/norm.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
dim(genenorm)
genenorm[1:10,1:10]
str(genenorm)
dim(genenorm)
dim(cmpnorm)
write.table(genenorm,file="~/Desktop/norm.txt", sep="\t", quote=FALSE)
corrnw <- fetchCorrGrinnNetwork(datNormX=cmpnorm, datNormY = genenorm, corrCoef=0.5, pval=0.05, method="spearman", returnAs="tab", sourceTo="gene")
cmpnorm[1:10,1:10]
genenorm[1:10,1:10]
?fetchCorrGrinnNetwork
dummy <- rbind(nodetype=rep("metabolite"),t(mtcars))
colnames(dummy) <- c('G1.1','G27967','G371','G4.1',paste0('G',sample(400:22000, 28)))
dummy
cmpnorm = read.csv("~/Documents/UCD/grinn_paper/example/metabolitenorm.txt", header = TRUE, row.names = 1, sep = "\t", stringsAsFactors = FALSE)
genenorm = read.csv("~/Documents/UCD/grinn_paper/example/genenorm.txt", header = TRUE, row.names = 1, sep = "\t", stringsAsFactors = FALSE)
genenorm[1:10,1:10]
cmpnorm[1:10,1:10]
?read.csv
genenorm = read.csv("~/Documents/UCD/grinn_paper/example/genenorm.txt", header = TRUE, row.names = 1, sep = "\t", stringsAsFactors = FALSE)
dim(genenorm)
genenorm[1:10,1:10]
genenorm[1:10,1]
rownames(genenorm) = genenorm$grinnID
genenorm[1:10,1]
genenorm[1:10,1:10]
genenorm = genenorm[,-1]
genenorm[1:10,1:10]
corrnw <- fetchCorrGrinnNetwork(datNormX=cmpnorm, datNormY = genenorm, corrCoef=0.5, pval=0.05, method="spearman", returnAs="tab", sourceTo="gene")
write.table(as.matrix(corrnw$edges),"~/Documents/UCD/grinn_paper/example/corrnwEdge.txt",sep="\t",row.names = F, quote = FALSE)
write.table(as.matrix(corrnw$nodes),"~/Documents/UCD/grinn_paper/example/corrnwNode.txt",sep="\t",row.names = F, quote = FALSE)
?fetchCorrGrinnNetwork
write.table(as.matrix(corrnw$edges),"~/Documents/UCD/grinn_paper/example/corrnwEdge.txt",sep="\t",row.names = F, quote = FALSE)
write.table(as.matrix(corrnw$nodes),"~/Documents/UCD/grinn_paper/example/corrnwNode.txt",sep="\t",row.names = F, quote = FALSE)
xx = data.frame()
xx
yy = data.frame(a='1',b='2')
yy
rbind(xx,yy)
xx = fetchGrinnNetwork(txtInput = 'xx', from="gene", to="pathway")
xx
str(xx)
basicnw4 = list(nodes=data.frame(),edges=data.frame())
basicnw5 = list(nodes=data.frame(),edges=data.frame())
basicnwNodes = rbind(basicnw4$nodes,basicnw5$nodes) #collect all nodes
basicnwEdges = rbind(basicnw4$edges,basicnw5$edges) #collect all edges
basicnwNodes
str(basicnwNodes)
dummy <- rbind(nodetype=rep("metabolite"),t(mtcars))
library(grinn)
colnames(dummy) <- c('G1.1','G27967','G371','G4.1',paste0('G',sample(400:22000, 28)))
result <- fetchCorrGrinnNetwork(datX=dummy, corrCoef=0.7, pval=1e-12, method="spearman", returnAs="tab", yTo="protein")
result
dummyX <- rbind(nodetype=rep("metabolite"),t(mtcars)[,1:16])
colnames(dummyX) <- c('G1.1','G27967','G371','G4.1',paste0('G',sample(400:22000, 12)))
dummyY <- rbind(nodetype=rep("protein"),t(mtcars)[,17:32])
colnames(dummyY) <- c('P28845','P08235','Q08AG9','P80365',paste0('P',sample(10000:80000, 12)))
result <- fetchCorrGrinnNetwork(datX=dummyX, datY=dummyY, corrCoef=0.7, pval=1e-4, method="spearman", returnAs="json", xTo="pathway", yTo="gene")
result$edges
result <- fetchCorrGrinnNetwork(datX=dummyX, datY=dummyY, corrCoef=0.7, pval=1e-4, method="spearman", xTo="pathway", yTo="gene")
result$edges
dummy <- rbind(nodetype=rep("metabolite"),t(mtcars))
library(grinn)
dummy <- rbind(nodetype=rep("metabolite"),t(mtcars))
colnames(dummy) <- c('G1.1','G27967','G371','G4.1',paste0('G',sample(400:22000, 28)))
result <- fetchCorrGrinnNetwork(datX=dummy, corrCoef=0.7, pval=1e-12, method="spearman", returnAs="tab", xTo="protein")
result <- fetchCorrGrinnNetwork(datX=dummy, corrCoef=0.7, pval=1e-12, method="spearman", returnAs="tab", xTo="protein")
result$edges
basicnwNodes = rbind(basicnw4$nodes,basicnw5$nodes)
basicnwEdges = rbind(basicnw4$edges,basicnw5$edges)
basicnwEdges
is.null(basicnwEdges)
nrow(basicnwEdges)
result <- fetchCorrGrinnNetwork(datX=dummy, corrCoef=0.7, pval=1e-12, method="spearman", returnAs="tab", xTo="protein")
library(grinn)
result <- fetchCorrGrinnNetwork(datX=dummy, corrCoef=0.7, pval=1e-12, method="spearman", returnAs="tab")
library(grinn)
result <- fetchCorrGrinnNetwork(datX=dummy, corrCoef=0.7, pval=1e-12, method="spearman", returnAs="tab")
result
library(grinn)
dummyX <- rbind(nodetype=rep("metabolite"),t(mtcars)[,1:16])
colnames(dummyX) <- c('G1.1','G27967','G371','G4.1',paste0('G',sample(400:22000, 12)))
dummyY <- rbind(nodetype=rep("protein"),t(mtcars)[,17:32])
colnames(dummyY) <- c('P28845','P08235','Q08AG9','P80365',paste0('P',sample(10000:80000, 12)))
result <- fetchCorrGrinnNetwork(datX=dummyX, datY=dummyY, corrCoef=0.7, pval=1e-4, method="spearman", returnAs="json", xTo="pathway", yTo="gene")
result <- fetchCorrGrinnNetwork(datX=dummyX, datY=dummyY, corrCoef=0.7, pval=1e-4, method="spearman", yTo="gene")
library(grinn)
data(dummy)
data(dummyPheno)
result <- fetchModuGrinnNetwork(datX=dummy, datPheno=dummyPheno, minModuleSize=5, threshold=0.2, returnAs="tab", xTo="pathway", filterSource=c("REACTOME","KEGG"))
result <- fetchModuGrinnNetwork(datX=dummy, datPheno=dummyPheno, minModuleSize=5, threshold=0.2, returnAs="tab", filterSource=c("REACTOME","KEGG"))
dummy <- rbind(nodetype=rep("metabolite"),t(mtcars))
colnames(dummy) <- c('G1.1','G27967','G371','G4.1',paste0('G',sample(400:22000, 28)))
result <- fetchCorrGrinnNetwork(datX=dummy, corrCoef=0.7, pval=1e-12, method="spearman", returnAs="tab", xTo="protein")
dummyX1 <- rbind(nodetype=rep("metabolite"),mtcars[1:16,])
colnames(dummyX1) <- c('G1.1','G27967','G371','G4.1',letters[1:7])
rownames(dummyX1)[-1] <- paste0(rep("normal_"),1:16)
dummyX2 <- rbind(nodetype=rep("metabolite"),mtcars[17:32,])
colnames(dummyX2) <- c('G1.1','G27967','G371','G4.1',letters[1:7])
rownames(dummyX2)[-1] <- paste0(rep("cancer_"),1:16)
result <- fetchDiffCorrGrinnNetwork(datX1=dummyX1, datX2=dummyX2, pDiff=0.05, method="spearman", returnAs="tab", yTo="protein")
kw <- c('G160','G300','G371')
grinnnw <- fetchGrinnNetwork(txtInput=kw, from="metabolite", to="protein")
result <- combineNetwork(grinnnw,corrnw)
result <- combineNetwork(grinnnw,result)
dim(result$edges)
dim(grinnnw$edges)
data(dummy)
data(dummyPheno)
result <- fetchModuGrinnNetwork(datX=dummy, datPheno=dummyPheno, minModuleSize=5, threshold=0.2, returnAs="tab", xTo="pathway", filterSource=c("REACTOME","KEGG"))
dim(result$edges)
aa <- combineNetwork(grinnnw,result)
dummy <- rbind(nodetype=rep("metabolite"),t(mtcars))
colnames(dummy) <- c('G1.1','G15603','G371','G17295',paste0('G',sample(400:22000, 28)))
corrnw <- fetchCorrGrinnNetwork(datX=dummy, corrCoef=0.7, pval=1e-12, method="spearman", returnAs="tab", xTo="protein")
result <- combineNetwork(grinnnw,corrnw)
library(igraph)
plot(graph.data.frame(result$edges[,1:2], directed=FALSE))
library(grinn)
library(grinn)
kw <- c('G160','G300','G371')
grinnnw <- fetchGrinnNetwork(txtInput=kw, from="metabolite", to="protein")
dummy <- rbind(nodetype=rep("metabolite"),t(mtcars))
colnames(dummy) <- c('G1.1','G15603','G371','G17295',paste0('G',sample(400:22000, 28)))
corrnw <- fetchCorrGrinnNetwork(datX=dummy, corrCoef=0.7, pval=1e-12, method="spearman", returnAs="tab", xTo="protein")
result <- combineNetwork(grinnnw,corrnw)
result
result$nodes[1:3,]
result <- combineNetwork(grinnnw,corrnw)
library(grinn)
result <- combineNetwork(grinnnw,corrnw)
data(dummy)
dim(dummy)
dummy[1:10,1:10]
?fetchCorrNetwork
library(grinn)
?fetchCorrNetwork
sessionInfo()
?combineNetwork
?convertToGrinnID
txtInput <- c(371,783)
result <- convertToGrinnID(txtInput, nodetype="metabolite", dbXref="chebi")
result
?fetchDiffCorrGrinnNetwork
?fetchCorrGrinnNetwork
?fetchDiffCorrGrinnNetwork
