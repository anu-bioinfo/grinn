% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/getCorrAdjacency.R
\name{getCorrAdjacency}
\alias{getCorrAdjacency}
\title{compute correlation coefficients, pvalues and directions}
\usage{
getCorrAdjacency(datNormX, datNormY, method)
}
\description{
compute correlation coefficients, pvalues and relation directions from normalized data
using \code{WGCNA::cor} and \code{WGCNA::corPvalueStudent} to return outputs for further uses by
\code{fetchCorrNetwork}, \code{fetchDiffCorrNetwork}.
datNormX and datNormY are matrices in which rows are samples and columns are entities, require the first row to specify entity types e.g. metabolite.
If datNormY is given, then the correlations between the columns of datNormX and the columns of datNormY are computed.
Otherwise the correlations of the columns of datNormX are computed.
}
\references{
Langfelder P. and Horvath S. (2008) WGCNA: an R package for weighted correlation network analysis. BMC Bioinformatics, 9:559

Dudoit S., Yang YH., Callow MJ. and Speed TP. (2002) Statistical methods for identifying differentially expressed genes in replicated cDNA microarray experiments, STATISTICA SINICA, 12:111

Langfelder P. and Horvath S. Tutorials for the WGCNA package \url{http://labs.genetics.ucla.edu/horvath/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/index.html}
}
\seealso{
\code{\link{cor}}, \code{\link{corPvalueStudent}}, \code{\link{fetchCorrNetwork}}, \code{\link{fetchDiffCorrNetwork}}
datMet = read.delim("~/grinn_sample/Lung_MET.txt", header=TRUE, stringsAsFactors=FALSE)
datPrt = read.delim("~/grinn_sample/Lung_PRT.txt", header=TRUE, stringsAsFactors=FALSE)
Convert kegg ids to grinn ids
grinnID = convertToGrinnID(txtInput=datMet$KEGG.id, nodetype="metabolite", dbXref="kegg")
grinnID = grinnID[!duplicated(grinnID[,1]),] #keep the first mapped id
internal function, called by apply for formatting ids
mapToInput = function(x){
 id = which(grinnID$FROM_kegg == x[2])
 out = ifelse(length(id)>0,as.character(grinnID$GRINNID[id]),x[1]) }
formatting input data
datMet = t(datMet)
colnames(datMet) = apply(datMet,2,mapToInput)
datMet = datMet[-c(1,2),]
formatting input data
datPrt = t(datPrt)
colnames(datPrt) = datPrt[1,]
datPrt = datPrt[-1,]
corAdj = getCorrAdjacency(datNormX=datMet, datNormY=datPrt, method="spearman")
}

